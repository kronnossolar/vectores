package com.app.vector.vectores.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.app.vector.vectores.entity.Configuration;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CONFIGURATION".
*/
public class ConfigurationDao extends AbstractDao<Configuration, Long> {

    public static final String TABLENAME = "CONFIGURATION";

    /**
     * Properties of entity Configuration.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CantDecimal = new Property(1, Integer.class, "cantDecimal", false, "CANT_DECIMAL");
        public final static Property TipoView = new Property(2, Integer.class, "tipoView", false, "TIPO_VIEW");
        public final static Property Escala = new Property(3, Integer.class, "escala", false, "ESCALA");
        public final static Property TipoCoordenada = new Property(4, Integer.class, "tipoCoordenada", false, "TIPO_COORDENADA");
        public final static Property ShowHelp = new Property(5, Boolean.class, "showHelp", false, "SHOW_HELP");
    }


    public ConfigurationDao(DaoConfig config) {
        super(config);
    }
    
    public ConfigurationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CONFIGURATION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"CANT_DECIMAL\" INTEGER," + // 1: cantDecimal
                "\"TIPO_VIEW\" INTEGER," + // 2: tipoView
                "\"ESCALA\" INTEGER," + // 3: escala
                "\"TIPO_COORDENADA\" INTEGER," + // 4: tipoCoordenada
                "\"SHOW_HELP\" INTEGER);"); // 5: showHelp
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CONFIGURATION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Configuration entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer cantDecimal = entity.getCantDecimal();
        if (cantDecimal != null) {
            stmt.bindLong(2, cantDecimal);
        }
 
        Integer tipoView = entity.getTipoView();
        if (tipoView != null) {
            stmt.bindLong(3, tipoView);
        }
 
        Integer escala = entity.getEscala();
        if (escala != null) {
            stmt.bindLong(4, escala);
        }
 
        Integer tipoCoordenada = entity.getTipoCoordenada();
        if (tipoCoordenada != null) {
            stmt.bindLong(5, tipoCoordenada);
        }
 
        Boolean showHelp = entity.getShowHelp();
        if (showHelp != null) {
            stmt.bindLong(6, showHelp ? 1L: 0L);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Configuration entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer cantDecimal = entity.getCantDecimal();
        if (cantDecimal != null) {
            stmt.bindLong(2, cantDecimal);
        }
 
        Integer tipoView = entity.getTipoView();
        if (tipoView != null) {
            stmt.bindLong(3, tipoView);
        }
 
        Integer escala = entity.getEscala();
        if (escala != null) {
            stmt.bindLong(4, escala);
        }
 
        Integer tipoCoordenada = entity.getTipoCoordenada();
        if (tipoCoordenada != null) {
            stmt.bindLong(5, tipoCoordenada);
        }
 
        Boolean showHelp = entity.getShowHelp();
        if (showHelp != null) {
            stmt.bindLong(6, showHelp ? 1L: 0L);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Configuration readEntity(Cursor cursor, int offset) {
        Configuration entity = new Configuration( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // cantDecimal
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // tipoView
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // escala
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // tipoCoordenada
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0 // showHelp
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Configuration entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCantDecimal(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setTipoView(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setEscala(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setTipoCoordenada(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setShowHelp(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Configuration entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Configuration entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Configuration entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
